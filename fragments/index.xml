<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fragments on kw7oe</title>
    <link>https://kaiwern.com/fragments/</link>
    <description>Recent content in Fragments on kw7oe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://kaiwern.com/fragments/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Expose new port in iptables</title>
      <link>https://kaiwern.com/fragments/expose-new-port-in-iptables/</link>
      <pubDate>Sat, 02 Jul 2022 13:50:46 +0800</pubDate>
      
      <guid>https://kaiwern.com/fragments/expose-new-port-in-iptables/</guid>
      <description>A while ago, I was trying to deploy a ngrok liked reverse proxy I implemented during my time in the Recurse Center to my DigitalOcean droplet.
Since my implementation require to listen to different ports for different client, I&amp;rsquo;ll need to expose those ports in my remote server in DigitalOcean. Long story short, it took me a while to figure out that the server is using iptables to block any incoming traffic from other ports.</description>
    </item>
    
    <item>
      <title>Things I learn while testing files in Rust</title>
      <link>https://kaiwern.com/fragments/things-i-learn-while-testing-files-in-rust/</link>
      <pubDate>Fri, 20 May 2022 21:09:09 +0800</pubDate>
      
      <guid>https://kaiwern.com/fragments/things-i-learn-while-testing-files-in-rust/</guid>
      <description>Dealing with files while running tests in Rust can be tricky, namely running the tests concurrently and dealing with file clean up when a test fail or panic halfway.
Concurrency By default, cargo test run your Rust tests in multiple threads. Depending on your tests, if you&amp;rsquo;re using the same filename in multiple test cases, it might caused unexpected failures.</description>
    </item>
    
    <item>
      <title>Logging Thread ID in Rust</title>
      <link>https://kaiwern.com/fragments/logging-thread-id-in-rust/</link>
      <pubDate>Sat, 07 May 2022 15:14:16 +0800</pubDate>
      
      <guid>https://kaiwern.com/fragments/logging-thread-id-in-rust/</guid>
      <description>Recently, I am working on implementing concurrent operations for B+ Tree index in Rust. Dealing with concurrency bugs can be pain in the ass and and being able to print the thread ID along with by my debug message definitely help me understand the interleaving operations better.
Here&amp;rsquo;s how I learn to do it using env_logger crate and tracing crate.</description>
    </item>
    
    <item>
      <title>Decomposition</title>
      <link>https://kaiwern.com/fragments/decomposition/</link>
      <pubDate>Wed, 04 May 2022 19:23:13 +0800</pubDate>
      
      <guid>https://kaiwern.com/fragments/decomposition/</guid>
      <description>Decomposition is the process of breaking down a complex problem into smaller parts. It is also one of the most widely applicable Computer Science (CS) concept in our lives.
If a system you&amp;rsquo;re learning is too complex to understand/implement, break it down into manageable parts. Writing your own programming language is complex, but writing a lexer is probably not.</description>
    </item>
    
    <item>
      <title>Solutions I&#39;m  trying to have a productive day</title>
      <link>https://kaiwern.com/fragments/solutions-im-trying-to-have-a-productive-day/</link>
      <pubDate>Wed, 27 Apr 2022 09:55:02 +0800</pubDate>
      
      <guid>https://kaiwern.com/fragments/solutions-im-trying-to-have-a-productive-day/</guid>
      <description>I&amp;rsquo;m currently attending a 12 weeks retreats in Recurse Center (RC). Since it&amp;rsquo;s self directed and I&amp;rsquo;m constantly working at the edge of my abilities, I do face some challenges during my time here that affect my productivity. Some of the challenges I faced are:
 I felt tired/demotivated to do anything after working intensely through a problem.</description>
    </item>
    
  </channel>
</rss>
