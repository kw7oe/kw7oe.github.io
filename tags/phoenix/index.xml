<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>phoenix on kw7oe</title>
    <link>https://kaiwern.com/tags/phoenix/</link>
    <description>Recent content in phoenix on kw7oe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jul 2020 20:09:01 +0800</lastBuildDate>
    
	<atom:link href="https://kaiwern.com/tags/phoenix/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploying Elixir/Phoenix Release to Production</title>
      <link>https://kaiwern.com/posts/2020/07/20/deploying-elixir/phoenix-release-to-production/</link>
      <pubDate>Mon, 20 Jul 2020 20:09:01 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2020/07/20/deploying-elixir/phoenix-release-to-production/</guid>
      <description>Updates (12th August 2020): Fix my mistake on using bin/app restart.
In my previous post &amp;ldquo;Building Elixir/Phoenix Release With Docker&amp;rdquo;, I wrote about how I build Elixir release with Docker and extract the tarball. Today, I am going to share how I deploy Elixir release to the production server.</description>
    </item>
    
    <item>
      <title>Building Elixir/Phoenix Release With Docker</title>
      <link>https://kaiwern.com/posts/2020/06/20/building-elixir/phoenix-release-with-docker/</link>
      <pubDate>Sat, 20 Jun 2020 14:17:08 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2020/06/20/building-elixir/phoenix-release-with-docker/</guid>
      <description>This is a short post about how I build my Elixir/Phoenix releases with Docker and extract the tarball that will be deployed to production. In this approach, we are just building the release with Docker. We are not building the image to run our application in a Docker container.</description>
    </item>
    
    <item>
      <title>Using Tesseract OCR in Elixir/Phoenix</title>
      <link>https://kaiwern.com/posts/2019/06/03/using-tesseract-ocr-in-elixir/phoenix/</link>
      <pubDate>Mon, 03 Jun 2019 18:04:00 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2019/06/03/using-tesseract-ocr-in-elixir/phoenix/</guid>
      <description>Lately, I am exploring the use of OCR in Expendere (my expense tracking application) and came across Tesseract OCR.
At the time of writing this blog post, there is no native binding of Tesseract OCR in Elixir. However, there are two Elixir wrapper available on GitHub:
 tesseract-ocr-elixir tesseract-elixir  Both wrapper use System.</description>
    </item>
    
    <item>
      <title>Send temporary file in Phoenix</title>
      <link>https://kaiwern.com/posts/2019/05/28/send-temporary-file-in-phoenix/</link>
      <pubDate>Tue, 28 May 2019 20:59:00 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2019/05/28/send-temporary-file-in-phoenix/</guid>
      <description>TLDR: Use Phoenix.Controller.send_download/3 to send binary as download to your users.
In Phoenix, there are a couple ways of to send file to your users. The most straightforward one is to programmatically create a file and send it to user using Plug.Conn.send_file/5.
For example:
def export(conn, _params) do # Create file filename = &amp;#34;test.</description>
    </item>
    
  </channel>
</rss>