<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tutorial on kw7oe</title>
    <link>https://kaiwern.com/tags/tutorial/</link>
    <description>Recent content in tutorial on kw7oe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 12 Feb 2022 20:30:11 +0800</lastBuildDate><atom:link href="https://kaiwern.com/tags/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing a simple Firefox Extension</title>
      <link>https://kaiwern.com/posts/2022/02/12/writing-a-simple-firefox-extension/</link>
      <pubDate>Sat, 12 Feb 2022 20:30:11 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2022/02/12/writing-a-simple-firefox-extension/</guid>
      <description>Every now and then, I want to build something that I would use. Coming from a web developer background, I&amp;rsquo;m under the impression that I have to build a web application.
One day I have this &amp;ldquo;a ha&amp;rdquo; moment:
 Actually most of the time, I can just build a web extension instead of a web application for my needs!</description>
    </item>
    
    <item>
      <title>Writing a simple Redis Protocol parser in Elixir</title>
      <link>https://kaiwern.com/posts/2022/01/04/writing-a-simple-redis-protocol-parser-in-elixir/</link>
      <pubDate>Tue, 04 Jan 2022 21:01:05 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2022/01/04/writing-a-simple-redis-protocol-parser-in-elixir/</guid>
      <description>Today, we are going to write a parser that parse Redis Protocol in Elixir.
There are tons of supported commands in Redis. Since this is our first attempt on implementing it, we will only be focusing on the GET and SET.
At the end of this post, you should be able to write a simple parser to parse request/response by Redis client/server.</description>
    </item>
    
    <item>
      <title>Blue Green Deployment with Nginx for Elixir/Phoenix Release</title>
      <link>https://kaiwern.com/posts/2021/05/15/blue-green-deployment-with-nginx-for-elixir-phoenix-release/</link>
      <pubDate>Sat, 15 May 2021 19:30:41 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2021/05/15/blue-green-deployment-with-nginx-for-elixir-phoenix-release/</guid>
      <description>In this post today, I&amp;rsquo;ll share about how I setup blue green deployment for my Phoenix application using nginx running on a single machine. This post is made possible thanks to this article about Custom Blue Green Deployment with Nginx And Gitlab CI.
The core idea to make blue green deployment possible for Elixir releases with nginx is through:</description>
    </item>
    
    <item>
      <title>Deploying Elixir/Phoenix Release to Production</title>
      <link>https://kaiwern.com/posts/2020/07/20/deploying-elixir/phoenix-release-to-production/</link>
      <pubDate>Mon, 20 Jul 2020 20:09:01 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2020/07/20/deploying-elixir/phoenix-release-to-production/</guid>
      <description>Updates (12th August 2020): Fix my mistake on using bin/app restart.
Updates (7th October 2020): Include the reason why bin/app restart doesn&amp;rsquo;t work
In my previous post &amp;ldquo;Building Elixir/Phoenix Release With Docker&amp;rdquo;, I wrote about how I build Elixir release with Docker and extract the tarball. Today, I am going to share how I deploy Elixir release to the production server.</description>
    </item>
    
    <item>
      <title>Building Elixir/Phoenix Release With Docker</title>
      <link>https://kaiwern.com/posts/2020/06/20/building-elixir/phoenix-release-with-docker/</link>
      <pubDate>Sat, 20 Jun 2020 14:17:08 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2020/06/20/building-elixir/phoenix-release-with-docker/</guid>
      <description>This is a short post about how I build my Elixir/Phoenix releases with Docker and extract the tarball that will be deployed to production. In this approach, we are just building the release with Docker. We are not building the image to run our application in a Docker container.
This post assume that you have the basic knowledge of Docker, building Elixir release and using Elixir 1.</description>
    </item>
    
    <item>
      <title>Essential Date Functions for Grouping in PostgreSQL</title>
      <link>https://kaiwern.com/posts/2020/04/14/essential-date-functions-for-grouping-in-postgresql/</link>
      <pubDate>Tue, 14 Apr 2020 18:43:08 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2020/04/14/essential-date-functions-for-grouping-in-postgresql/</guid>
      <description>The past months, I have been working on a feature which deal with grouping records by date and summing up values.
I have learn a couple of date functions in PostgreSQL that are very useful when it comes to grouping records together based on datetime column.
In this post, we will go through a bit of the context of the feature I work on, and we will walk through the process of implementing it.</description>
    </item>
    
    <item>
      <title>Using Tesseract OCR in Elixir/Phoenix</title>
      <link>https://kaiwern.com/posts/2019/06/03/using-tesseract-ocr-in-elixir/phoenix/</link>
      <pubDate>Mon, 03 Jun 2019 18:04:00 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2019/06/03/using-tesseract-ocr-in-elixir/phoenix/</guid>
      <description>Lately, I am exploring the use of OCR in Expendere (my expense tracking application) and came across Tesseract OCR.
At the time of writing this blog post, there is no native binding of Tesseract OCR in Elixir. However, there are two Elixir wrapper available on GitHub:
 tesseract-ocr-elixir tesseract-elixir  Both wrapper use System.</description>
    </item>
    
    <item>
      <title>Minimal Elixir Web Application with Plug and Cowboy</title>
      <link>https://kaiwern.com/posts/2018/10/14/minimal-elixir-web-application-with-plug-and-cowboy/</link>
      <pubDate>Sun, 14 Oct 2018 15:32:00 +0800</pubDate>
      
      <guid>https://kaiwern.com/posts/2018/10/14/minimal-elixir-web-application-with-plug-and-cowboy/</guid>
      <description>It is interesting to learn things from scratch. Coming from Ruby background, I was curious what is the equivalent of Sinatra in Elixir. It&amp;rsquo;s called Plug. It is what Phoenix build on top of.
Using Sinatra, we can write a quick and simple web server with the following code:
require &amp;#39;sinatra&amp;#39; require &amp;#39;json&amp;#39; get &amp;#39;/&amp;#39; do content_type :json JSON({message: &amp;#34;Hello World&amp;#34;}) end How can we achive that in Elixir?</description>
    </item>
    
  </channel>
</rss>
